@page
@model MermaidHelp.Pages.IndexModel
@{
    ViewBag.Title = "起始页面";
    var F = Html.F();
}

@functions {
}
@section head{

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/default.min.css">
    <style>
        #rightPanel_Content {
            margin: 1rem;
            text-align: center;
        }

        pre {
            margin: 0px;
        }

        .hljs {
            background-color: unset;
        }

        .hljs-ln {
            padding-bottom: 1.2rem;
            margin: 0rem !important;
        }

        .hljs-ln td {
            border: none !important;
            padding: 2px 6px !important;
            line-height: 1.2rem;
            font-size: 1rem;
        }

        .hljs-ln tr td:first-child {
            color: cadetblue;
            border-right: 1px solid !important;
        }

        .hljs-ln tr {
            border: none !important;
        }

        .history {
            margin: 1rem;
            border: 1px solid #ccc;
            padding: 0.5rem;
            border-radius: 5px;
            background: #eee;
        }
    </style>
}
@section body {
    <f:Panel ID="mainPanel" IsViewPort="true" NoBorderAndHeader Layout="@LayoutType.HBox" BodyPadding="5">
        <Items>
            <f:Panel ID="leftPanel" BoxFlex="2" NoBorderAndHeader Layout="@LayoutType.VBox" BodyPadding="5">
                <Items>
                    <f:ContentPanel Title="返回的代码" ID="codePanel" BoxFlex="1" AutoScroll="true" EnableCollapse="true"
                                    Expanded="true" Layout="@LayoutType.Fit" ShowBorder="true" CustomToolAhead="true">
                        <Tools>
                            <f:Tool IconFont="@IconFont.Copy" Text="复制(Markdown)" OnClientClick="btnCopy_Click();"></f:Tool>
                        </Tools>
                    </f:ContentPanel>
                    <f:Panel ID="textPanel" BoxFlex="2" Expanded="true" Layout="@LayoutType.VBox" MarginTop="5">
                        <Items>
                            <f:ContentPanel ID="messagePanel" AutoScroll="true" Title="会话" BoxFlex="1" ShowBorder="true">
                                <Tools>
                                    <f:Tool IconFont="@IconFont.Refresh" Text="新建的会话" OnClick="btnRefresh_Click"></f:Tool>
                                </Tools>
                            </f:ContentPanel>
                            <f:Form ShowHeader="false" ShowBorder="false">
                                <Items>
                                    <f:TextArea ID="txtInput" EmptyText="请输入需求" AutoGrowHeight="true" AutoGrowHeightMax="200">
                                    </f:TextArea>
                                </Items>
                                <Toolbars>
                                    <f:Toolbar Position="@ToolbarPosition.Bottom" ToolbarAlign="@ToolbarAlign.Right">
                                        <Items>
                                            <f:Button Text="发送" IconFont="@IconFont.Send"
                                                      OnClickDelegate="@(e =>
                                                    {
                                                        e.Action = Url.Handler("txtInput_Enter");
                                                        e.AjaxLoadingType = AjaxLoadingType.Mask;
                                                        e.ShowAjaxLoadingMaskText = true;
                                                    })"></f:Button>
                                        </Items>
                                    </f:Toolbar>
                                </Toolbars>
                            </f:Form>
                        </Items>
                    </f:Panel>
                </Items>
            </f:Panel>
            <f:ContentPanel ID="rightPanel" BoxFlex="3" Title="预览" ShowBorder="true">
                <Tools>
                    <f:Tool IconFont="@IconFont.Image" Text="导出图片" OnClientClick="saveToImg();"></f:Tool>
                </Tools>
            </f:ContentPanel>
        </Items>
    </f:Panel>
}

@section script {
    <script src="~/js/marked.min.js"></script>
    <script src="~/js/highlight.min.js"></script>
    <script src="~/js/highlightjs-line-numbers.min.js"></script>
    <script src="~/js/mermaid.min.js"></script>
    <script src="~/js/pako.min.js"></script>
    <script src="~/js/base64.min.js"></script>
    <script>
        /**初始化 */
        F.ready(() => {
            $('#rightPanel_Content').addClass('mermaid');
            mermaid.initialize({
                startOnLoad: true,
                securityLevel: 'loose',
            });
        });
    </script>
    <script>
        F.ready(() => {
            F.ui.codePanel.setText = function (msg) {
                F.ui.codePanel.codeText = msg;
                //显示代码，并且显示视图
                const htmlContent = markedAPI(msg, mermaidAPI);

                document.getElementById('codePanel_Content').innerHTML = htmlContent;

                //重绘行号
                hljs.initLineNumbersOnLoad({
                    singleLine: true
                });
                //历史会话
                F.ui.messagePanel.setText(F.ui.txtInput.getText())
            }
            /**历史会话 */
            F.ui.messagePanel.setText = function (msg) {
                let msgdiv = $(`<div>${msg}</div>`);
                msgdiv.addClass("history");
                $(`#messagePanel_Content`).append(msgdiv)
                F.ui.txtInput.setText(``);
            }
            /**清除 */
            F.ui.messagePanel.clear = function () {
                $(`#messagePanel_Content`).html(``);
            }
        });

        /**显示代码 显示 mermaid*/
        var markedAPI = (msg, mermaidfun) => {
            let api = marked.use({
                renderer: {
                    code(code, type, escaped) {
                        if (type == "mermaid") {
                            mermaidfun(code);
                        }
                        return `<pre><code class="hljs language-${type}" data-name="21">${code}</code></pre>`;
                    }
                }
            });
            return api(msg)
        }
        /**显示视图 */
        const mermaidAPI = async (code) => {
            F.ui.codePanel.mermaidText = code;
            const { svg, bindFunctions } = await mermaid.render('mermaidSvg', code);
            setTimeout(() => {
                document.querySelector(`#rightPanel_Content`).innerHTML = svg;
            })
        };

        /**复制 */
        async function btnCopy_Click() {
            try { await copyToClipboard(F.ui.codePanel.codeText); }//成功
            catch (e) { }//失败
        }

        /**导出图片 */
        function saveToImg() {
            const pako = serialize(JSON.stringify({
                "code": F.ui.codePanel.mermaidText,
                "mermaid": {
                    "theme": "default"
                },
                "autoSync": true,
                "updateDiagram": true,
                "editorMode": "code"
            }));
            const dataURL = `https://mermaid.ink/img/pako:${pako}?type=png`;

            // 使用 fetch 获取图片数据并转换为 Blob 对象
            fetch(dataURL)
                .then(response => response.blob())
                .then(blob => {
                    // 创建一个临时的 <a> 元素
                    const link = document.createElement('a');

                    // 创建一个对象 URL
                    const url = URL.createObjectURL(blob);

                    // 设置下载文件的名称
                    link.download = '导出图片.png';

                    // 将 href 属性设置为对象 URL
                    link.href = url;

                    // 将 <a> 元素添加到 DOM 中（这是为了使其可点击）
                    document.body.appendChild(link);

                    // 触发点击事件，开始下载
                    link.click();

                    // 下载完成后，将 <a> 元素从 DOM 中移除
                    document.body.removeChild(link);

                    // 释放对象 URL
                    URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('下载图片时出错:', error);
                });
        }
        // 定义 serialize 和 deserialize 函数
        function serialize(state) {
            const data = new TextEncoder().encode(state);
            const compressed = pako.deflate(data, { level: 9 });
            return Base64.fromUint8Array(compressed, true);
        }

        function deserialize(state) {
            const data = Base64.toUint8Array(state);
            return pako.inflate(data, { to: 'string' });
        }

    </script>
}